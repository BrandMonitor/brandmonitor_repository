<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

     <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
       <!--  慢SQL统计，如果SQL执行时间超过一定时间则记录为慢SQL  -->
        <property name="slowSqlMillis" value="3000" />
       <!--  慢SQL统计日志输出  -->
        <property name="logSlowSql" value="true" />
        <!-- 合并SQL统计 例如select * from table t where t.id =1，会被变为select * from table t where t.id =？来统计  -->
        <property name="mergeSql" value="true" />
    </bean>

    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
       <!--  指定配置装载的目录  -->
        <property name="dir" value="META-INF/druid/wall/mysql" />
        <property name="selectWhereAlwayTrueCheck" value="false" />
        <property name="selectHavingAlwayTrueCheck" value="false" />
        <property name="multiStatementAllow" value="true" />
    </bean>

    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql" />
        <property name="config" ref="wall-filter-config" />
    </bean>
 
    
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${datasource.jdbc.url}" />
      <property name="username" value="${datasource.jdbc.username}" />
      <property name="password" value="${datasource.jdbc.password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="${datasource.jdbc.initialSize}" />
      <property name="minIdle" value="${datasource.jdbc.minIdle}" /> 
      <property name="maxActive" value="${datasource.jdbc.maxActive}" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="${datasource.jdbc.maxWait}" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="${datasource.jdbc.timeBetweenEvictionRunsMillis}" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="${datasource.jdbc.minEvictableIdleTimeMillis}" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="true" />
      <property name="testOnReturn" value="true" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="false" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

      <!-- 关闭长时间不使用的连接 -->
      <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
      <property name="removeAbandonedTimeout" value="1200" /> <!-- 1200秒，也就是20分钟 -->
      <property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
      
       <!-- 配置监控统计拦截的filters -->
       <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="wall-filter" />
            </list>
        </property> 
        
      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat,wall" />
       
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource" />
 	</bean>
 	<!-- 使用注解配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 配置   sqlSessionFactory -->
     <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath*:mybatis/mapping/*Mapper.xml" />
    </bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sessionFactory" />
	</bean>
    
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.trademark.dao" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory" />
	</bean>
    
</beans>
